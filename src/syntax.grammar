@top Program { Variant }

@skip { space | LineComment }

variant_child {
  expr ";" |
  Stmt
}
variant_last_child {
  expr ";"? |
  Stmt
}

Variant {
  variant_child* variant_last_child
}

Variants {
  "{" (Variant "/")* Variant "}"
}

expr {
  expr_inner (":" type_expr)? |
  Variants
}

expr_inner {
  Integer |
  String |
  Variable |
  Nullary |
  Sexpr
}

Sexpr {
  "(" callee expr* ")" |
  "(" expr Opalias expr ")"
}

Stmt {
  callee expr+ ";" |
  expr Opalias expr ";"
}

callee {
  Builtin |
  Opalias |
  Variable
}

type_expr {
  type_range |
  Type_name |
  type_sexpr
}

Opalias {
  Opalias_raw | ".." | @specialize<Builtin, "mod" | "rem" | "div" | "trunc_div">
}

Nullary {
  @specialize<Builtin, "argv" | "argc" | "true" | "false">
}

type_range {
  ("-oo" | Integer) ".." ("oo" | Integer)
}

type_sexpr {
  "(" Type_name (type_expr | Integer)+ ")"
}

@tokens {
  Integer {
    "0" |
    (
      "-"? $[1-9] $[0-9]* ($[eE] $[1-9] $[0-9]*)?
    ) |
    (
      "-"? "0x" $[1-9a-fA-F] $[0-9a-fA-F]*
    ) |
    (
      "-"? "0b1" $[01]*
    )
  }

  String { '"' (!["\\] | "\\" _)* '"' }

  Variable {"$" $[a-zA-Z_]+}

  Type_name {$[A-Z] $[a-z]*}

  Opalias_raw {"<-" | "+" | "-" | "*" | "^" | "&" | "|" | "~" | ">>" | "<<" | "==" | "!=" | "<=" | "<" | ">=" | ">" | "=>" | "#"}

  Builtin {$[a-z_] $[a-z0-9_]*}

  LineComment { "%" ![\n]* }

  space { @whitespace+ }

  @precedence { Integer, Opalias_raw }
}

@detectDelim
